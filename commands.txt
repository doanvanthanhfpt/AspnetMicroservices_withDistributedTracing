/* create and run all containers */
docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml up -d

/* stop and remove all running containers */
docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml down

/* build and run all running containers */
docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml up --build

/* display the list of all running containers */
docker ps

/* display the list of all images */
docker images

/* display the list of all volumes */
docker volume ls

/* stop container */
docker stop << First 4 Characters of Container ID >>

/* remove container */
docker rm << First 4 Characters of Container ID >>

/* remove image */
docker rmi << First 4 Characters of Image ID >>

/* remove volume */
docker volume rm << Volume Name >>

/* stop all containers */
docker stop $(docker ps -a -q)

/* remove all containers */
docker rm -f $(docker ps -a -q)

/* remove all images */
docker rmi $(docker images -a -q)

/* remove all volumes */
docker volume rm $(docker volume ls -q)

/* remove all unused containers and images */
docker system prune

/* remove all unused volumnes */
docker volume prune

********************************************************************************************

Install-Package << Package Name >>
Install-Package Microsoft.Extensions.Caching.StackExchangeRedis
Install-Package Npgsql
Install-Package Dapper
Install-Package AutoMapper.Extensions.Microsoft.DependencyInjection
Install-Package MediatR.Extensions.Microsoft.DependencyInjection
Install-Package AutoMapper.Extensions.Microsoft.DependencyInjection
Install-Package FluentValidation.DependencyInjectionExtensions
Install-Package Microsoft.EntityFrameworkCore.SqlServer
Install-Package Microsoft.EntityFrameworkCore.Tools
Install-Package MassTransit
Install-Package MassTransit.RabbitMQ
Install-Package MassTransit.AspNetCore
Install-Package Ocelot
Install-Package Ocelot.Cache.CacheManager

Update-Package -ProjectName << Project Name >>
Add-Migration InitialCreate

********************************************************************************************

/* mongo bash commands */
docker exec -it shopping-mongo /bin/bash
ls
mongo
show dbs
use CatalogDb
db.createCollection('Products')
db.Products.insertMany([{ 'Name':'Asus Laptop','Category':'Computers', 'Summary':'Summary', 'Description':'Description', 'ImageFile':'ImageFile', 'Price':54.93 }, { 'Name':'HP Laptop','Category':'Computers', 'Summary':'Summary', 'Description':'Description', 'ImageFile':'ImageFile', 'Price':88.93 } ])
db.Products.find({}).pretty()
db.Products.remove({})
show databases
show collections

/* redis bash commands */
docker exec -it aspnetrun-redis /bin/bash
redis-cli
ping
set key value
get key

/* database scripts */
CREATE TABLE Coupon(
	ID SERIAL PRIMARY KEY         NOT NULL,
	ProductName     VARCHAR(24) NOT NULL,
	Description     TEXT,
	Amount          INT
);
INSERT INTO Coupon (ProductName, Description, Amount) VALUES ('IPhone X', 'IPhone Discount', 150);
INSERT INTO Coupon (ProductName, Description, Amount) VALUES ('Samsung 10', 'Samsung Discount', 100);

/* credentials */
portainer = admin / abcd1234
rabbitmq = guest / guest

********************************************************************************************
